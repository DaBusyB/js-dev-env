-we installed EditorConfig so that formatting is consistent among all devs despite their IDE settings

-package manager gives us a standardized method for sharing files code

-create a package.json file. package.json is node's package manifest. this is where we will find all the npm packages we are using as well as npm scripts

-install all necessary node

- share work in progress with Local Tunnel, NGROK, Now or Surge

- Grunt, Gulp, npm scripts for automation the dev environment and build process
- npm-run-all allows us to run more that one script at a time in crossplatform mode. can put this in start, prestart or poststart or add it to a key and
- adding --parallel followed by the key of any other scripts you want to run will allow scripts to be run at the same time.

- transpilers allow us to write in future versions of JS or in 1 of over a hundred of languages that compile down to JS.
- the two most popular transpilers are Babel(breaks things down to ES5) and Typescript(superset of JS with it's own added features)
- add .babelrc to root dir and add presets object
- babel-node transpiles the code before passing it on to node

- a bundler take s all the JS files and packages them for a target env like a browser or node
- they alse provide lots of other features
- popular options are browserify and webpack

- to debug the transpiled bundles think about using sourcemaps
- sourcemaps map code back to original source
- a sourcemap is already defined in the webpack config file
- put debugger where I would like the breakpoint to hit and view break in dev tools

- a linter helps avoid mistakes and enforce consistency

- automated unit testing - testing small units of code
- some libraries come with an assertion library
- assertion a way to declare what you expect
- a helper library
- run on save

- integration tests - testing multiple units
- run on demand on or in QA

- CI server- continuous integration
- travis(hosted), jenkins(host on my own), appveyor(windows env) are the most popular
- the moment there is a commit it automatically runs a build, runs tests and ensures they pass, can reject commits if code coverage is low, can automate deployment
- quickly catches mistakes
- confirmation that committed code from team works as expected on another machine
- notifies us when someone breaks the build

